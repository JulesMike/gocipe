
// Delete deletes a {{.EntityName}} record from database and sets id to nil
func (repo {{.EntityName}}Repository) Delete(ctx context.Context, entity {{.EntityName}}, tx *sql.Tx, autocommit bool) ({{.EntityName}}, error) {
	var (
		err  error
		stmt *sql.Stmt
	)
	id := entity.ID

	if tx == nil {
		if err = util.CheckContext(ctx); err != nil {
			return entity, err
		}

		tx, err = repo.db.Begin()
		if err != nil {
			return entity, err
		}
	}

	if err = util.CheckContext(ctx); err != nil {
		return entity, err
	}

	stmt, err = tx.Prepare("DELETE FROM {{.Table}} WHERE id = $1")
	if err != nil {
		return entity, err
	}
	{{if .HasPreHook}}
	if err = util.CheckContext(ctx); err != nil {
		return entity, err
	}

	if err = crudPreDelete(id, tx); err != nil {
		tx.Rollback()
		return entity, err
	}
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return entity, err
	}
	
	_, err = stmt.Exec(id)
	if err == nil {
		entity.ID = {{pkeyPropertyEmptyVal .PrimaryKey}}
	} else {
		tx.Rollback()
		return entity, err
	}
	{{if .HasPostHook}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return entity, err
	}
	
	if err = crudPostDelete(id, tx); err != nil {
		tx.Rollback()
		return entity, err
	}
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return entity, err
	}

	if autocommit {
		err = tx.Commit()
	}
	
	return entity, nil
}