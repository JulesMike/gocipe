
// Update Will execute an SQLUpdate Statement for {{.EntityName}} in the database. Prefer using Save instead of Update directly.
func (repo {{.EntityName}}Repository) Update(ctx context.Context, entity {{.EntityName}}, tx *sql.Tx, autocommit bool) ({{.EntityName}}, error) {
	var (
		err error
		stmt *sql.Stmt
	)

	if tx == nil {
		select {
		case <-ctx.Done():
			return entity, ctx.Err()
		default:
			tx, err = repo.db.Begin()
			if err != nil {
				return entity, err
			}
		}
	}
	{{range .Before}}{{.}}
	{{end}}
	select {
	case <-ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		break
	}

	stmt, err = tx.Prepare("UPDATE {{.Table}} SET {{.SQLFields}} WHERE id = $1")
	if err != nil {
		return entity, err
	}

	{{if .HasPreHook}}
	select {
	case <-ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		break
	}

    if err = crudPreSave("UPDATE", entity, tx); err != nil {
		tx.Rollback()
        return entity, err
	}
	{{end}}
	select {
	case <-ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		break
	}
	_, err = stmt.Exec({{.StructFields}})
	if err != nil {
		tx.Rollback()
		return entity, err
	}
	{{range .Relationships}}
	select {
	case <-ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		break
	}
	stmtRel, err = tx.Prepare("DELETE FROM {{.Table}} WHERE {{.ThisID}} = $1")

	if err != nil {
		return entity, err
	}

	_, err = stmtRel.Exec(*entity.ID)
	if err != nil {
		tx.Rollback()
		return entity, err
	}

	stmtRel, err = tx.Prepare("INSERT INTO {{.Table}} ({{.ThisID}}, {{.ThatID}}) VALUES ($1, $2)")
	
	if err != nil {
		return entity, err
	}

	for _, relatedID := range *entity.{{.PropertyName}} {
		select {
		case <-ctx.Done():
			tx.Rollback()
			return entity, ctx.Err()
		default:
			break
		}

		_, err = stmtRel.Exec(*entity.ID, relatedID)
		if err != nil {
			tx.Rollback()
			return entity, err
		}
	}
	{{end}}
	{{if .HasPostHook}}
	select {
	case <-ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		break
	}

	if err = crudPostSave("UPDATE", entity, tx); err != nil {
		tx.Rollback()
		return entity, err
	}
	{{end}}
	select {
	case <-ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		if autocommit {
			err = tx.Commit()
		}
	}

	return entity, err
}