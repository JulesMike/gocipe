
// Get returns a single {{.EntityName}} from database by primary key
func (repo {{.EntityName}}Repository) Get(ctx context.Context, id {{pkeyPropertyType .PrimaryKey}}) ({{.EntityName}}, error) {
	var (
		rows   *sql.Rows
		err    error
		entity {{.EntityName}}
	)
	{{if .HasPreHook}}
    if err = crudPreGet(ctx, id); err != nil {
		return entity, err
	}
    {{end}}
	select {
	case <- ctx.Done():
		return entity, ctx.Err()
	default:
		break
	}

	rows, err = repo.db.Query("SELECT {{.SQLFields}} FROM {{.Table}} WHERE id = $1 ORDER BY .id ASC", id)
	if err != nil {
		return entity, err
	}

	defer rows.Close()
	if rows.Next() {
		select {
		case <- ctx.Done():
			return entity, ctx.Err()
		default:
			break
		}

		{{range .Before}}{{.}}{{end}}

		err = rows.Scan({{.StructFields}})
		if err != nil {
			return entity, err
		}
		
		{{range .After}}{{.}}{{end}}
	}
	{{if .HasPostHook}}
	select {
	case <-ctx.Done():
		return entity, ctx.Err()
	default:
		if err = crudPostGet(ctx, entity); err != nil {
			return entity, err
		}
	}
	{{end}}

	return entity, nil
}