
// Insert performs an SQL insert for {{.EntityName}} record and update instance with inserted id.
func (repo {{.EntityName}}Repository) Insert(ctx context.Context, entity {{.EntityName}}, tx *sql.Tx, autocommit bool) ({{.EntityName}}, error) {
	var (
		{{- if pkeyIsAuto .PrimaryKey -}}
		id  {{pkeyPropertyType .PrimaryKey}}
		{{- end}}
		err  error
		stmt *sql.Stmt
	)

	if tx == nil {
		select {
		case <-ctx.Done():
			return entity, ctx.Err()
		default:
			tx, err = repo.db.Begin()
			if err != nil {
				return entity, err
			}
		}
	}
	{{range .Before}}{{.}}{{end}}

	select {
	case <-ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		break
	}

	{{if eq .PrimaryKey "serial" -}}
	stmt, err = tx.Prepare("INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}}) RETURNIentity, NG id")
	if err != nil {
		return entity, err
	}
	{{else}}
	stmt, err = tx.Prepare("INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}})")
	if err != nil {
		return entity, err
	}
	{{- end}}

	{{if .HasPreHook}}
	select {
	case <-ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		if err = crudPreSave("INSERT", entity, tx); err != nil {
			tx.Rollback()
			return entity, err
		}
	}
	{{end}}
	select {
	case <-ctx.Done():
		return entity, ctx.Err()
	default:
		break
	}
	{{if eq .PrimaryKey "serial" -}}
	err = stmt.QueryRow({{.StructFields}}).Scan(&id)
	if err == nil {
		entity.ID = &id
	} else {
		tx.Rollback()
		return entity, err
	}
	{{else}}
	{{if eq .PrimaryKey "uuid" -}}
	idUUID, err := uuid.NewV4()
	
	if err == nil {
		id = idUUID.String()
	} else {
		tx.Rollback()
		return entity, err
	}
	*entity.ID = id
	{{- end}}

	select {
	case <-ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		break
	}

	_, err = stmt.Exec({{.StructFields}})
	if err != nil {
		tx.Rollback()
		return entity, err
	}
	{{end}}
	{{if .HasPostHook}}
	select {
	case <- ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		break
	}
	if err := crudPostSave("INSERT", entity, tx); err != nil {
		tx.Rollback()
		return entity, err
	}
	{{end}}

	select {
	case <- ctx.Done():
		tx.Rollback()
		return entity, ctx.Err()
	default:
		if autocommit {
			err = tx.Commit()
		}
	}

	return entity, nil
}