
// Load{{.Funcname}} is a helper function to load related {{.PropertyName}} entities
func (repo {{.ThisEntity}}Repositorium) Load{{.Funcname}}(ctx context.Context, entities ...{{.ThisEntity}}) error {
	var (
		err error
		placeholder string
		values  []interface{}
		indices = make(map[{{.ThisType}}][]*{{.ThisEntity}})
	)

	if err = util.CheckContext(ctx); err != nil {
		return err
	}

	c := 1
	for _, entity := range entities {
		placeholder += "$" + strconv.Itoa(c) + ","
		indices[entity.ID] = append(indices[entity.ID], &entity)
		values = append(values, entity.ID)
		c++
	}
	placeholder = strings.TrimRight(placeholder, ",")

	{{if .Full}}
	rows, err := repo.db.Query(`
		SELECT {{.ThisID}}, {{.SQLFields}} FROM {{.ThatTable}} WHERE {{.ThisID}} IN (`+placeholder+`)
	`, values...)
	if err != nil {
		return err
	}
	{{else}}
	rows, err := repo.db.Query("SELECT {{.ThisID}}, {{.ThatID}} FROM {{.ThatTable}} WHERE {{.ThisID}} IN ("+placeholder+")", values...)
	if err != nil {
		return err
	}
	{{end}}

	if err = util.CheckContext(ctx); err != nil {
		return err
	}

	for rows.Next() {
		var (
			thisID {{.ThisType}}
			{{if .Full -}}
			entity {{.ThatEntity}}
			{{- else -}}
			thatID {{.ThatType}}
			{{- end -}}
		)
		{{if .Full -}}
		{{range .Before}}{{.}}
		{{end}}
		err = rows.Scan(&thisID, {{.StructFields}})
		if err != nil {
			return err
		}
		{{range .After}}{{.}}
		{{end}}
		{{- else -}}
		err = rows.Scan(&thisID, &thatID)
		if err != nil {
			return err
		}
		{{- end}}

		for _, ent := range indices[thisID] {
			{{if .Full -}}
			ent.{{.PropertyName}} = append(ent.{{.PropertyName}}, &entity)
			{{- else -}}
			ent.{{.PropertyName}} = append(ent.{{.PropertyName}}, thatID)
			{{- end}}
		}
		
		if err = util.CheckContext(ctx); err != nil {
			return err
		}
	}

	return nil
}