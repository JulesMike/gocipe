
// DeleteMany deletes many {{.EntityName}} records from database using filter
func (repo {{.EntityName}}Repositorium) DeleteMany(ctx context.Context, filters []ListFilter, tx *sql.Tx, autocommit bool) error {
	var (
		err      error
		stmt     *sql.Stmt
		segments []string
		values   []interface{}
	)

	if tx == nil {
		if err = util.CheckContext(ctx); err != nil {
			return err
		}
		
		tx, err = repo.db.Begin()
		if err != nil {
			return err
		}
	}

	query := "DELETE FROM {{.Table}}"
	{{if .HasPreHook}}
    if filters, err = repo.preDeleteMany(ctx, tx, filters); err != nil {
		return err
	}
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}

	for i, filter := range filters {
		segments = append(segments, filter.Field+" "+filter.Operation+" $"+strconv.Itoa(i+1))
		values = append(values, filter.Value)
	}

	if len(segments) != 0 {
		query += " WHERE " + strings.Join(segments, " AND ")
	}

	stmt, err = repo.db.Prepare(query)
	if err != nil {
		return err
	}

	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}

	_, err = stmt.Exec(values...)
	if err != nil {
		tx.Rollback()
		return err
	}

	{{if .HasPostHook}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}

	if err = repo.postDeleteMany(ctx, tx, filters); err != nil {
		tx.Rollback()
		return err
	}
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}

	if autocommit {
		err = tx.Commit()
	}

	return err
}